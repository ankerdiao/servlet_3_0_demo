/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.servlet.demo.netty.sample.myprotocol.bo;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * 彩种期号表Do
 */
public class IssueDo implements org.apache.thrift.TBase<IssueDo, IssueDo._Fields>, java.io.Serializable, Cloneable, Comparable<IssueDo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IssueDo");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRINT_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printBeginTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PRINT_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printEndTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SINGLE_UPLOAD_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUploadEndTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SINGLE_TOGETHER_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleTogetherEndTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SINGLE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleEndTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField COMPOUND_TOGETHER_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("compoundTogetherEndTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COMPOUND_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("compoundEndTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CHAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("char1", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHAR2_FIELD_DESC = new org.apache.thrift.protocol.TField("char2", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CHAR3_FIELD_DESC = new org.apache.thrift.protocol.TField("char3", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OFFICIAL_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialBeginTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField OFFICIAL_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialEndTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DRAW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("drawTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("drawResult", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EXT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extInfo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField INT1_FIELD_DESC = new org.apache.thrift.protocol.TField("int1", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField INT2_FIELD_DESC = new org.apache.thrift.protocol.TField("int2", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField INT3_FIELD_DESC = new org.apache.thrift.protocol.TField("int3", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField DATE1_FIELD_DESC = new org.apache.thrift.protocol.TField("date1", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField DATE2_FIELD_DESC = new org.apache.thrift.protocol.TField("date2", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField DATE3_FIELD_DESC = new org.apache.thrift.protocol.TField("date3", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField ISSUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueId", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField ISSUE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("issueState", org.apache.thrift.protocol.TType.I32, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IssueDoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IssueDoTupleSchemeFactory());
  }

  /**
   * 版本控制
   */
  public int version; // required
  /**
   * 出票开始时间
   */
  public long printBeginTime; // optional
  /**
   * 出票结束时间
   */
  public long printEndTime; // optional
  /**
   * 单式上传截止时间
   */
  public long singleUploadEndTime; // optional
  /**
   * 单式合买截止时间
   */
  public long singleTogetherEndTime; // optional
  /**
   * 单式自购截止时间
   */
  public long singleEndTime; // optional
  /**
   * 复式合买截止时间
   */
  public long compoundTogetherEndTime; // optional
  /**
   * 复式自购截止时间
   */
  public long compoundEndTime; // optional
  /**
   * 字符型扩展1
   */
  public String char1; // optional
  /**
   * 字符型扩展2
   */
  public String char2; // optional
  /**
   * 字符型扩展3
   */
  public String char3; // optional
  /**
   * 官方销售开始时间
   */
  public long officialBeginTime; // optional
  /**
   * 官方销售结束时间
   */
  public long officialEndTime; // optional
  /**
   * 开奖日期
   */
  public long drawTime; // optional
  /**
   * 开奖结果
   */
  public String drawResult; // optional
  /**
   * 彩种Id
   */
  public String lotteryId; // optional
  /**
   * 扩展信息
   */
  public String extInfo; // optional
  /**
   * 投注开始时间
   */
  public long beginTime; // optional
  /**
   * 整形扩展1
   */
  public long int1; // optional
  /**
   * 整形扩展2
   */
  public long int2; // optional
  /**
   * 整形扩展3
   */
  public long int3; // optional
  /**
   * 日期扩展1
   */
  public long date1; // optional
  /**
   * 日期扩展2
   */
  public long date2; // optional
  /**
   * 日期扩展3
   */
  public long date3; // optional
  /**
   * 最后更新时间
   */
  public long lastUpdateTime; // optional
  /**
   * 期号(竞彩一周一期，其它为彩票中心定的期号)
   */
  public String issueNo; // optional
  /**
   * 期号id
   */
  public long issueId; // optional
  /**
   * 期号状态
   */
  public int issueState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 版本控制
     */
    VERSION((short)1, "version"),
    /**
     * 出票开始时间
     */
    PRINT_BEGIN_TIME((short)2, "printBeginTime"),
    /**
     * 出票结束时间
     */
    PRINT_END_TIME((short)3, "printEndTime"),
    /**
     * 单式上传截止时间
     */
    SINGLE_UPLOAD_END_TIME((short)4, "singleUploadEndTime"),
    /**
     * 单式合买截止时间
     */
    SINGLE_TOGETHER_END_TIME((short)5, "singleTogetherEndTime"),
    /**
     * 单式自购截止时间
     */
    SINGLE_END_TIME((short)6, "singleEndTime"),
    /**
     * 复式合买截止时间
     */
    COMPOUND_TOGETHER_END_TIME((short)7, "compoundTogetherEndTime"),
    /**
     * 复式自购截止时间
     */
    COMPOUND_END_TIME((short)8, "compoundEndTime"),
    /**
     * 字符型扩展1
     */
    CHAR1((short)9, "char1"),
    /**
     * 字符型扩展2
     */
    CHAR2((short)10, "char2"),
    /**
     * 字符型扩展3
     */
    CHAR3((short)11, "char3"),
    /**
     * 官方销售开始时间
     */
    OFFICIAL_BEGIN_TIME((short)12, "officialBeginTime"),
    /**
     * 官方销售结束时间
     */
    OFFICIAL_END_TIME((short)13, "officialEndTime"),
    /**
     * 开奖日期
     */
    DRAW_TIME((short)14, "drawTime"),
    /**
     * 开奖结果
     */
    DRAW_RESULT((short)15, "drawResult"),
    /**
     * 彩种Id
     */
    LOTTERY_ID((short)16, "lotteryId"),
    /**
     * 扩展信息
     */
    EXT_INFO((short)17, "extInfo"),
    /**
     * 投注开始时间
     */
    BEGIN_TIME((short)18, "beginTime"),
    /**
     * 整形扩展1
     */
    INT1((short)19, "int1"),
    /**
     * 整形扩展2
     */
    INT2((short)20, "int2"),
    /**
     * 整形扩展3
     */
    INT3((short)21, "int3"),
    /**
     * 日期扩展1
     */
    DATE1((short)22, "date1"),
    /**
     * 日期扩展2
     */
    DATE2((short)23, "date2"),
    /**
     * 日期扩展3
     */
    DATE3((short)24, "date3"),
    /**
     * 最后更新时间
     */
    LAST_UPDATE_TIME((short)25, "lastUpdateTime"),
    /**
     * 期号(竞彩一周一期，其它为彩票中心定的期号)
     */
    ISSUE_NO((short)26, "issueNo"),
    /**
     * 期号id
     */
    ISSUE_ID((short)27, "issueId"),
    /**
     * 期号状态
     */
    ISSUE_STATE((short)28, "issueState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // PRINT_BEGIN_TIME
          return PRINT_BEGIN_TIME;
        case 3: // PRINT_END_TIME
          return PRINT_END_TIME;
        case 4: // SINGLE_UPLOAD_END_TIME
          return SINGLE_UPLOAD_END_TIME;
        case 5: // SINGLE_TOGETHER_END_TIME
          return SINGLE_TOGETHER_END_TIME;
        case 6: // SINGLE_END_TIME
          return SINGLE_END_TIME;
        case 7: // COMPOUND_TOGETHER_END_TIME
          return COMPOUND_TOGETHER_END_TIME;
        case 8: // COMPOUND_END_TIME
          return COMPOUND_END_TIME;
        case 9: // CHAR1
          return CHAR1;
        case 10: // CHAR2
          return CHAR2;
        case 11: // CHAR3
          return CHAR3;
        case 12: // OFFICIAL_BEGIN_TIME
          return OFFICIAL_BEGIN_TIME;
        case 13: // OFFICIAL_END_TIME
          return OFFICIAL_END_TIME;
        case 14: // DRAW_TIME
          return DRAW_TIME;
        case 15: // DRAW_RESULT
          return DRAW_RESULT;
        case 16: // LOTTERY_ID
          return LOTTERY_ID;
        case 17: // EXT_INFO
          return EXT_INFO;
        case 18: // BEGIN_TIME
          return BEGIN_TIME;
        case 19: // INT1
          return INT1;
        case 20: // INT2
          return INT2;
        case 21: // INT3
          return INT3;
        case 22: // DATE1
          return DATE1;
        case 23: // DATE2
          return DATE2;
        case 24: // DATE3
          return DATE3;
        case 25: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 26: // ISSUE_NO
          return ISSUE_NO;
        case 27: // ISSUE_ID
          return ISSUE_ID;
        case 28: // ISSUE_STATE
          return ISSUE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __PRINTBEGINTIME_ISSET_ID = 1;
  private static final int __PRINTENDTIME_ISSET_ID = 2;
  private static final int __SINGLEUPLOADENDTIME_ISSET_ID = 3;
  private static final int __SINGLETOGETHERENDTIME_ISSET_ID = 4;
  private static final int __SINGLEENDTIME_ISSET_ID = 5;
  private static final int __COMPOUNDTOGETHERENDTIME_ISSET_ID = 6;
  private static final int __COMPOUNDENDTIME_ISSET_ID = 7;
  private static final int __OFFICIALBEGINTIME_ISSET_ID = 8;
  private static final int __OFFICIALENDTIME_ISSET_ID = 9;
  private static final int __DRAWTIME_ISSET_ID = 10;
  private static final int __BEGINTIME_ISSET_ID = 11;
  private static final int __INT1_ISSET_ID = 12;
  private static final int __INT2_ISSET_ID = 13;
  private static final int __INT3_ISSET_ID = 14;
  private static final int __DATE1_ISSET_ID = 15;
  private static final int __DATE2_ISSET_ID = 16;
  private static final int __DATE3_ISSET_ID = 17;
  private static final int __LASTUPDATETIME_ISSET_ID = 18;
  private static final int __ISSUEID_ISSET_ID = 19;
  private static final int __ISSUESTATE_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRINT_BEGIN_TIME,_Fields.PRINT_END_TIME,_Fields.SINGLE_UPLOAD_END_TIME,_Fields.SINGLE_TOGETHER_END_TIME,_Fields.SINGLE_END_TIME,_Fields.COMPOUND_TOGETHER_END_TIME,_Fields.COMPOUND_END_TIME,_Fields.CHAR1,_Fields.CHAR2,_Fields.CHAR3,_Fields.OFFICIAL_BEGIN_TIME,_Fields.OFFICIAL_END_TIME,_Fields.DRAW_TIME,_Fields.DRAW_RESULT,_Fields.LOTTERY_ID,_Fields.EXT_INFO,_Fields.BEGIN_TIME,_Fields.INT1,_Fields.INT2,_Fields.INT3,_Fields.DATE1,_Fields.DATE2,_Fields.DATE3,_Fields.LAST_UPDATE_TIME,_Fields.ISSUE_NO,_Fields.ISSUE_ID,_Fields.ISSUE_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINT_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("printBeginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRINT_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("printEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINGLE_UPLOAD_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleUploadEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINGLE_TOGETHER_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleTogetherEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINGLE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPOUND_TOGETHER_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("compoundTogetherEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPOUND_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("compoundEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHAR1, new org.apache.thrift.meta_data.FieldMetaData("char1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAR2, new org.apache.thrift.meta_data.FieldMetaData("char2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAR3, new org.apache.thrift.meta_data.FieldMetaData("char3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("officialBeginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OFFICIAL_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("officialEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DRAW_TIME, new org.apache.thrift.meta_data.FieldMetaData("drawTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("drawResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_INFO, new org.apache.thrift.meta_data.FieldMetaData("extInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT1, new org.apache.thrift.meta_data.FieldMetaData("int1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT2, new org.apache.thrift.meta_data.FieldMetaData("int2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT3, new org.apache.thrift.meta_data.FieldMetaData("int3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE1, new org.apache.thrift.meta_data.FieldMetaData("date1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE2, new org.apache.thrift.meta_data.FieldMetaData("date2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE3, new org.apache.thrift.meta_data.FieldMetaData("date3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_ID, new org.apache.thrift.meta_data.FieldMetaData("issueId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISSUE_STATE, new org.apache.thrift.meta_data.FieldMetaData("issueState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IssueDo.class, metaDataMap);
  }

  public IssueDo() {
  }

  public IssueDo(
    int version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IssueDo(IssueDo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.printBeginTime = other.printBeginTime;
    this.printEndTime = other.printEndTime;
    this.singleUploadEndTime = other.singleUploadEndTime;
    this.singleTogetherEndTime = other.singleTogetherEndTime;
    this.singleEndTime = other.singleEndTime;
    this.compoundTogetherEndTime = other.compoundTogetherEndTime;
    this.compoundEndTime = other.compoundEndTime;
    if (other.isSetChar1()) {
      this.char1 = other.char1;
    }
    if (other.isSetChar2()) {
      this.char2 = other.char2;
    }
    if (other.isSetChar3()) {
      this.char3 = other.char3;
    }
    this.officialBeginTime = other.officialBeginTime;
    this.officialEndTime = other.officialEndTime;
    this.drawTime = other.drawTime;
    if (other.isSetDrawResult()) {
      this.drawResult = other.drawResult;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetExtInfo()) {
      this.extInfo = other.extInfo;
    }
    this.beginTime = other.beginTime;
    this.int1 = other.int1;
    this.int2 = other.int2;
    this.int3 = other.int3;
    this.date1 = other.date1;
    this.date2 = other.date2;
    this.date3 = other.date3;
    this.lastUpdateTime = other.lastUpdateTime;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.issueId = other.issueId;
    this.issueState = other.issueState;
  }

  public IssueDo deepCopy() {
    return new IssueDo(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setPrintBeginTimeIsSet(false);
    this.printBeginTime = 0;
    setPrintEndTimeIsSet(false);
    this.printEndTime = 0;
    setSingleUploadEndTimeIsSet(false);
    this.singleUploadEndTime = 0;
    setSingleTogetherEndTimeIsSet(false);
    this.singleTogetherEndTime = 0;
    setSingleEndTimeIsSet(false);
    this.singleEndTime = 0;
    setCompoundTogetherEndTimeIsSet(false);
    this.compoundTogetherEndTime = 0;
    setCompoundEndTimeIsSet(false);
    this.compoundEndTime = 0;
    this.char1 = null;
    this.char2 = null;
    this.char3 = null;
    setOfficialBeginTimeIsSet(false);
    this.officialBeginTime = 0;
    setOfficialEndTimeIsSet(false);
    this.officialEndTime = 0;
    setDrawTimeIsSet(false);
    this.drawTime = 0;
    this.drawResult = null;
    this.lotteryId = null;
    this.extInfo = null;
    setBeginTimeIsSet(false);
    this.beginTime = 0;
    setInt1IsSet(false);
    this.int1 = 0;
    setInt2IsSet(false);
    this.int2 = 0;
    setInt3IsSet(false);
    this.int3 = 0;
    setDate1IsSet(false);
    this.date1 = 0;
    setDate2IsSet(false);
    this.date2 = 0;
    setDate3IsSet(false);
    this.date3 = 0;
    setLastUpdateTimeIsSet(false);
    this.lastUpdateTime = 0;
    this.issueNo = null;
    setIssueIdIsSet(false);
    this.issueId = 0;
    setIssueStateIsSet(false);
    this.issueState = 0;
  }

  /**
   * 版本控制
   */
  public int getVersion() {
    return this.version;
  }

  /**
   * 版本控制
   */
  public IssueDo setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * 出票开始时间
   */
  public long getPrintBeginTime() {
    return this.printBeginTime;
  }

  /**
   * 出票开始时间
   */
  public IssueDo setPrintBeginTime(long printBeginTime) {
    this.printBeginTime = printBeginTime;
    setPrintBeginTimeIsSet(true);
    return this;
  }

  public void unsetPrintBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINTBEGINTIME_ISSET_ID);
  }

  /** Returns true if field printBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINTBEGINTIME_ISSET_ID);
  }

  public void setPrintBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINTBEGINTIME_ISSET_ID, value);
  }

  /**
   * 出票结束时间
   */
  public long getPrintEndTime() {
    return this.printEndTime;
  }

  /**
   * 出票结束时间
   */
  public IssueDo setPrintEndTime(long printEndTime) {
    this.printEndTime = printEndTime;
    setPrintEndTimeIsSet(true);
    return this;
  }

  public void unsetPrintEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINTENDTIME_ISSET_ID);
  }

  /** Returns true if field printEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINTENDTIME_ISSET_ID);
  }

  public void setPrintEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINTENDTIME_ISSET_ID, value);
  }

  /**
   * 单式上传截止时间
   */
  public long getSingleUploadEndTime() {
    return this.singleUploadEndTime;
  }

  /**
   * 单式上传截止时间
   */
  public IssueDo setSingleUploadEndTime(long singleUploadEndTime) {
    this.singleUploadEndTime = singleUploadEndTime;
    setSingleUploadEndTimeIsSet(true);
    return this;
  }

  public void unsetSingleUploadEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEUPLOADENDTIME_ISSET_ID);
  }

  /** Returns true if field singleUploadEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUploadEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEUPLOADENDTIME_ISSET_ID);
  }

  public void setSingleUploadEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEUPLOADENDTIME_ISSET_ID, value);
  }

  /**
   * 单式合买截止时间
   */
  public long getSingleTogetherEndTime() {
    return this.singleTogetherEndTime;
  }

  /**
   * 单式合买截止时间
   */
  public IssueDo setSingleTogetherEndTime(long singleTogetherEndTime) {
    this.singleTogetherEndTime = singleTogetherEndTime;
    setSingleTogetherEndTimeIsSet(true);
    return this;
  }

  public void unsetSingleTogetherEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLETOGETHERENDTIME_ISSET_ID);
  }

  /** Returns true if field singleTogetherEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleTogetherEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLETOGETHERENDTIME_ISSET_ID);
  }

  public void setSingleTogetherEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLETOGETHERENDTIME_ISSET_ID, value);
  }

  /**
   * 单式自购截止时间
   */
  public long getSingleEndTime() {
    return this.singleEndTime;
  }

  /**
   * 单式自购截止时间
   */
  public IssueDo setSingleEndTime(long singleEndTime) {
    this.singleEndTime = singleEndTime;
    setSingleEndTimeIsSet(true);
    return this;
  }

  public void unsetSingleEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEENDTIME_ISSET_ID);
  }

  /** Returns true if field singleEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEENDTIME_ISSET_ID);
  }

  public void setSingleEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEENDTIME_ISSET_ID, value);
  }

  /**
   * 复式合买截止时间
   */
  public long getCompoundTogetherEndTime() {
    return this.compoundTogetherEndTime;
  }

  /**
   * 复式合买截止时间
   */
  public IssueDo setCompoundTogetherEndTime(long compoundTogetherEndTime) {
    this.compoundTogetherEndTime = compoundTogetherEndTime;
    setCompoundTogetherEndTimeIsSet(true);
    return this;
  }

  public void unsetCompoundTogetherEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOUNDTOGETHERENDTIME_ISSET_ID);
  }

  /** Returns true if field compoundTogetherEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompoundTogetherEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOUNDTOGETHERENDTIME_ISSET_ID);
  }

  public void setCompoundTogetherEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOUNDTOGETHERENDTIME_ISSET_ID, value);
  }

  /**
   * 复式自购截止时间
   */
  public long getCompoundEndTime() {
    return this.compoundEndTime;
  }

  /**
   * 复式自购截止时间
   */
  public IssueDo setCompoundEndTime(long compoundEndTime) {
    this.compoundEndTime = compoundEndTime;
    setCompoundEndTimeIsSet(true);
    return this;
  }

  public void unsetCompoundEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOUNDENDTIME_ISSET_ID);
  }

  /** Returns true if field compoundEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompoundEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOUNDENDTIME_ISSET_ID);
  }

  public void setCompoundEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOUNDENDTIME_ISSET_ID, value);
  }

  /**
   * 字符型扩展1
   */
  public String getChar1() {
    return this.char1;
  }

  /**
   * 字符型扩展1
   */
  public IssueDo setChar1(String char1) {
    this.char1 = char1;
    return this;
  }

  public void unsetChar1() {
    this.char1 = null;
  }

  /** Returns true if field char1 is set (has been assigned a value) and false otherwise */
  public boolean isSetChar1() {
    return this.char1 != null;
  }

  public void setChar1IsSet(boolean value) {
    if (!value) {
      this.char1 = null;
    }
  }

  /**
   * 字符型扩展2
   */
  public String getChar2() {
    return this.char2;
  }

  /**
   * 字符型扩展2
   */
  public IssueDo setChar2(String char2) {
    this.char2 = char2;
    return this;
  }

  public void unsetChar2() {
    this.char2 = null;
  }

  /** Returns true if field char2 is set (has been assigned a value) and false otherwise */
  public boolean isSetChar2() {
    return this.char2 != null;
  }

  public void setChar2IsSet(boolean value) {
    if (!value) {
      this.char2 = null;
    }
  }

  /**
   * 字符型扩展3
   */
  public String getChar3() {
    return this.char3;
  }

  /**
   * 字符型扩展3
   */
  public IssueDo setChar3(String char3) {
    this.char3 = char3;
    return this;
  }

  public void unsetChar3() {
    this.char3 = null;
  }

  /** Returns true if field char3 is set (has been assigned a value) and false otherwise */
  public boolean isSetChar3() {
    return this.char3 != null;
  }

  public void setChar3IsSet(boolean value) {
    if (!value) {
      this.char3 = null;
    }
  }

  /**
   * 官方销售开始时间
   */
  public long getOfficialBeginTime() {
    return this.officialBeginTime;
  }

  /**
   * 官方销售开始时间
   */
  public IssueDo setOfficialBeginTime(long officialBeginTime) {
    this.officialBeginTime = officialBeginTime;
    setOfficialBeginTimeIsSet(true);
    return this;
  }

  public void unsetOfficialBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFICIALBEGINTIME_ISSET_ID);
  }

  /** Returns true if field officialBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFICIALBEGINTIME_ISSET_ID);
  }

  public void setOfficialBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFICIALBEGINTIME_ISSET_ID, value);
  }

  /**
   * 官方销售结束时间
   */
  public long getOfficialEndTime() {
    return this.officialEndTime;
  }

  /**
   * 官方销售结束时间
   */
  public IssueDo setOfficialEndTime(long officialEndTime) {
    this.officialEndTime = officialEndTime;
    setOfficialEndTimeIsSet(true);
    return this;
  }

  public void unsetOfficialEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFICIALENDTIME_ISSET_ID);
  }

  /** Returns true if field officialEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFICIALENDTIME_ISSET_ID);
  }

  public void setOfficialEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFICIALENDTIME_ISSET_ID, value);
  }

  /**
   * 开奖日期
   */
  public long getDrawTime() {
    return this.drawTime;
  }

  /**
   * 开奖日期
   */
  public IssueDo setDrawTime(long drawTime) {
    this.drawTime = drawTime;
    setDrawTimeIsSet(true);
    return this;
  }

  public void unsetDrawTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRAWTIME_ISSET_ID);
  }

  /** Returns true if field drawTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DRAWTIME_ISSET_ID);
  }

  public void setDrawTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRAWTIME_ISSET_ID, value);
  }

  /**
   * 开奖结果
   */
  public String getDrawResult() {
    return this.drawResult;
  }

  /**
   * 开奖结果
   */
  public IssueDo setDrawResult(String drawResult) {
    this.drawResult = drawResult;
    return this;
  }

  public void unsetDrawResult() {
    this.drawResult = null;
  }

  /** Returns true if field drawResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawResult() {
    return this.drawResult != null;
  }

  public void setDrawResultIsSet(boolean value) {
    if (!value) {
      this.drawResult = null;
    }
  }

  /**
   * 彩种Id
   */
  public String getLotteryId() {
    return this.lotteryId;
  }

  /**
   * 彩种Id
   */
  public IssueDo setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  /**
   * 扩展信息
   */
  public String getExtInfo() {
    return this.extInfo;
  }

  /**
   * 扩展信息
   */
  public IssueDo setExtInfo(String extInfo) {
    this.extInfo = extInfo;
    return this;
  }

  public void unsetExtInfo() {
    this.extInfo = null;
  }

  /** Returns true if field extInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtInfo() {
    return this.extInfo != null;
  }

  public void setExtInfoIsSet(boolean value) {
    if (!value) {
      this.extInfo = null;
    }
  }

  /**
   * 投注开始时间
   */
  public long getBeginTime() {
    return this.beginTime;
  }

  /**
   * 投注开始时间
   */
  public IssueDo setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
  }

  /**
   * 整形扩展1
   */
  public long getInt1() {
    return this.int1;
  }

  /**
   * 整形扩展1
   */
  public IssueDo setInt1(long int1) {
    this.int1 = int1;
    setInt1IsSet(true);
    return this;
  }

  public void unsetInt1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT1_ISSET_ID);
  }

  /** Returns true if field int1 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt1() {
    return EncodingUtils.testBit(__isset_bitfield, __INT1_ISSET_ID);
  }

  public void setInt1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT1_ISSET_ID, value);
  }

  /**
   * 整形扩展2
   */
  public long getInt2() {
    return this.int2;
  }

  /**
   * 整形扩展2
   */
  public IssueDo setInt2(long int2) {
    this.int2 = int2;
    setInt2IsSet(true);
    return this;
  }

  public void unsetInt2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT2_ISSET_ID);
  }

  /** Returns true if field int2 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt2() {
    return EncodingUtils.testBit(__isset_bitfield, __INT2_ISSET_ID);
  }

  public void setInt2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT2_ISSET_ID, value);
  }

  /**
   * 整形扩展3
   */
  public long getInt3() {
    return this.int3;
  }

  /**
   * 整形扩展3
   */
  public IssueDo setInt3(long int3) {
    this.int3 = int3;
    setInt3IsSet(true);
    return this;
  }

  public void unsetInt3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT3_ISSET_ID);
  }

  /** Returns true if field int3 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt3() {
    return EncodingUtils.testBit(__isset_bitfield, __INT3_ISSET_ID);
  }

  public void setInt3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT3_ISSET_ID, value);
  }

  /**
   * 日期扩展1
   */
  public long getDate1() {
    return this.date1;
  }

  /**
   * 日期扩展1
   */
  public IssueDo setDate1(long date1) {
    this.date1 = date1;
    setDate1IsSet(true);
    return this;
  }

  public void unsetDate1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE1_ISSET_ID);
  }

  /** Returns true if field date1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDate1() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE1_ISSET_ID);
  }

  public void setDate1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE1_ISSET_ID, value);
  }

  /**
   * 日期扩展2
   */
  public long getDate2() {
    return this.date2;
  }

  /**
   * 日期扩展2
   */
  public IssueDo setDate2(long date2) {
    this.date2 = date2;
    setDate2IsSet(true);
    return this;
  }

  public void unsetDate2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE2_ISSET_ID);
  }

  /** Returns true if field date2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDate2() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE2_ISSET_ID);
  }

  public void setDate2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE2_ISSET_ID, value);
  }

  /**
   * 日期扩展3
   */
  public long getDate3() {
    return this.date3;
  }

  /**
   * 日期扩展3
   */
  public IssueDo setDate3(long date3) {
    this.date3 = date3;
    setDate3IsSet(true);
    return this;
  }

  public void unsetDate3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE3_ISSET_ID);
  }

  /** Returns true if field date3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDate3() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE3_ISSET_ID);
  }

  public void setDate3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE3_ISSET_ID, value);
  }

  /**
   * 最后更新时间
   */
  public long getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  /**
   * 最后更新时间
   */
  public IssueDo setLastUpdateTime(long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    setLastUpdateTimeIsSet(true);
    return this;
  }

  public void unsetLastUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID);
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID);
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID, value);
  }

  /**
   * 期号(竞彩一周一期，其它为彩票中心定的期号)
   */
  public String getIssueNo() {
    return this.issueNo;
  }

  /**
   * 期号(竞彩一周一期，其它为彩票中心定的期号)
   */
  public IssueDo setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  /**
   * 期号id
   */
  public long getIssueId() {
    return this.issueId;
  }

  /**
   * 期号id
   */
  public IssueDo setIssueId(long issueId) {
    this.issueId = issueId;
    setIssueIdIsSet(true);
    return this;
  }

  public void unsetIssueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  /** Returns true if field issueId is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueId() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  public void setIssueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUEID_ISSET_ID, value);
  }

  /**
   * 期号状态
   */
  public int getIssueState() {
    return this.issueState;
  }

  /**
   * 期号状态
   */
  public IssueDo setIssueState(int issueState) {
    this.issueState = issueState;
    setIssueStateIsSet(true);
    return this;
  }

  public void unsetIssueState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUESTATE_ISSET_ID);
  }

  /** Returns true if field issueState is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueState() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUESTATE_ISSET_ID);
  }

  public void setIssueStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUESTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case PRINT_BEGIN_TIME:
      if (value == null) {
        unsetPrintBeginTime();
      } else {
        setPrintBeginTime((Long)value);
      }
      break;

    case PRINT_END_TIME:
      if (value == null) {
        unsetPrintEndTime();
      } else {
        setPrintEndTime((Long)value);
      }
      break;

    case SINGLE_UPLOAD_END_TIME:
      if (value == null) {
        unsetSingleUploadEndTime();
      } else {
        setSingleUploadEndTime((Long)value);
      }
      break;

    case SINGLE_TOGETHER_END_TIME:
      if (value == null) {
        unsetSingleTogetherEndTime();
      } else {
        setSingleTogetherEndTime((Long)value);
      }
      break;

    case SINGLE_END_TIME:
      if (value == null) {
        unsetSingleEndTime();
      } else {
        setSingleEndTime((Long)value);
      }
      break;

    case COMPOUND_TOGETHER_END_TIME:
      if (value == null) {
        unsetCompoundTogetherEndTime();
      } else {
        setCompoundTogetherEndTime((Long)value);
      }
      break;

    case COMPOUND_END_TIME:
      if (value == null) {
        unsetCompoundEndTime();
      } else {
        setCompoundEndTime((Long)value);
      }
      break;

    case CHAR1:
      if (value == null) {
        unsetChar1();
      } else {
        setChar1((String)value);
      }
      break;

    case CHAR2:
      if (value == null) {
        unsetChar2();
      } else {
        setChar2((String)value);
      }
      break;

    case CHAR3:
      if (value == null) {
        unsetChar3();
      } else {
        setChar3((String)value);
      }
      break;

    case OFFICIAL_BEGIN_TIME:
      if (value == null) {
        unsetOfficialBeginTime();
      } else {
        setOfficialBeginTime((Long)value);
      }
      break;

    case OFFICIAL_END_TIME:
      if (value == null) {
        unsetOfficialEndTime();
      } else {
        setOfficialEndTime((Long)value);
      }
      break;

    case DRAW_TIME:
      if (value == null) {
        unsetDrawTime();
      } else {
        setDrawTime((Long)value);
      }
      break;

    case DRAW_RESULT:
      if (value == null) {
        unsetDrawResult();
      } else {
        setDrawResult((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case EXT_INFO:
      if (value == null) {
        unsetExtInfo();
      } else {
        setExtInfo((String)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case INT1:
      if (value == null) {
        unsetInt1();
      } else {
        setInt1((Long)value);
      }
      break;

    case INT2:
      if (value == null) {
        unsetInt2();
      } else {
        setInt2((Long)value);
      }
      break;

    case INT3:
      if (value == null) {
        unsetInt3();
      } else {
        setInt3((Long)value);
      }
      break;

    case DATE1:
      if (value == null) {
        unsetDate1();
      } else {
        setDate1((Long)value);
      }
      break;

    case DATE2:
      if (value == null) {
        unsetDate2();
      } else {
        setDate2((Long)value);
      }
      break;

    case DATE3:
      if (value == null) {
        unsetDate3();
      } else {
        setDate3((Long)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((Long)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case ISSUE_ID:
      if (value == null) {
        unsetIssueId();
      } else {
        setIssueId((Long)value);
      }
      break;

    case ISSUE_STATE:
      if (value == null) {
        unsetIssueState();
      } else {
        setIssueState((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case PRINT_BEGIN_TIME:
      return Long.valueOf(getPrintBeginTime());

    case PRINT_END_TIME:
      return Long.valueOf(getPrintEndTime());

    case SINGLE_UPLOAD_END_TIME:
      return Long.valueOf(getSingleUploadEndTime());

    case SINGLE_TOGETHER_END_TIME:
      return Long.valueOf(getSingleTogetherEndTime());

    case SINGLE_END_TIME:
      return Long.valueOf(getSingleEndTime());

    case COMPOUND_TOGETHER_END_TIME:
      return Long.valueOf(getCompoundTogetherEndTime());

    case COMPOUND_END_TIME:
      return Long.valueOf(getCompoundEndTime());

    case CHAR1:
      return getChar1();

    case CHAR2:
      return getChar2();

    case CHAR3:
      return getChar3();

    case OFFICIAL_BEGIN_TIME:
      return Long.valueOf(getOfficialBeginTime());

    case OFFICIAL_END_TIME:
      return Long.valueOf(getOfficialEndTime());

    case DRAW_TIME:
      return Long.valueOf(getDrawTime());

    case DRAW_RESULT:
      return getDrawResult();

    case LOTTERY_ID:
      return getLotteryId();

    case EXT_INFO:
      return getExtInfo();

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case INT1:
      return Long.valueOf(getInt1());

    case INT2:
      return Long.valueOf(getInt2());

    case INT3:
      return Long.valueOf(getInt3());

    case DATE1:
      return Long.valueOf(getDate1());

    case DATE2:
      return Long.valueOf(getDate2());

    case DATE3:
      return Long.valueOf(getDate3());

    case LAST_UPDATE_TIME:
      return Long.valueOf(getLastUpdateTime());

    case ISSUE_NO:
      return getIssueNo();

    case ISSUE_ID:
      return Long.valueOf(getIssueId());

    case ISSUE_STATE:
      return Integer.valueOf(getIssueState());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case PRINT_BEGIN_TIME:
      return isSetPrintBeginTime();
    case PRINT_END_TIME:
      return isSetPrintEndTime();
    case SINGLE_UPLOAD_END_TIME:
      return isSetSingleUploadEndTime();
    case SINGLE_TOGETHER_END_TIME:
      return isSetSingleTogetherEndTime();
    case SINGLE_END_TIME:
      return isSetSingleEndTime();
    case COMPOUND_TOGETHER_END_TIME:
      return isSetCompoundTogetherEndTime();
    case COMPOUND_END_TIME:
      return isSetCompoundEndTime();
    case CHAR1:
      return isSetChar1();
    case CHAR2:
      return isSetChar2();
    case CHAR3:
      return isSetChar3();
    case OFFICIAL_BEGIN_TIME:
      return isSetOfficialBeginTime();
    case OFFICIAL_END_TIME:
      return isSetOfficialEndTime();
    case DRAW_TIME:
      return isSetDrawTime();
    case DRAW_RESULT:
      return isSetDrawResult();
    case LOTTERY_ID:
      return isSetLotteryId();
    case EXT_INFO:
      return isSetExtInfo();
    case BEGIN_TIME:
      return isSetBeginTime();
    case INT1:
      return isSetInt1();
    case INT2:
      return isSetInt2();
    case INT3:
      return isSetInt3();
    case DATE1:
      return isSetDate1();
    case DATE2:
      return isSetDate2();
    case DATE3:
      return isSetDate3();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case ISSUE_NO:
      return isSetIssueNo();
    case ISSUE_ID:
      return isSetIssueId();
    case ISSUE_STATE:
      return isSetIssueState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IssueDo)
      return this.equals((IssueDo)that);
    return false;
  }

  public boolean equals(IssueDo that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_printBeginTime = true && this.isSetPrintBeginTime();
    boolean that_present_printBeginTime = true && that.isSetPrintBeginTime();
    if (this_present_printBeginTime || that_present_printBeginTime) {
      if (!(this_present_printBeginTime && that_present_printBeginTime))
        return false;
      if (this.printBeginTime != that.printBeginTime)
        return false;
    }

    boolean this_present_printEndTime = true && this.isSetPrintEndTime();
    boolean that_present_printEndTime = true && that.isSetPrintEndTime();
    if (this_present_printEndTime || that_present_printEndTime) {
      if (!(this_present_printEndTime && that_present_printEndTime))
        return false;
      if (this.printEndTime != that.printEndTime)
        return false;
    }

    boolean this_present_singleUploadEndTime = true && this.isSetSingleUploadEndTime();
    boolean that_present_singleUploadEndTime = true && that.isSetSingleUploadEndTime();
    if (this_present_singleUploadEndTime || that_present_singleUploadEndTime) {
      if (!(this_present_singleUploadEndTime && that_present_singleUploadEndTime))
        return false;
      if (this.singleUploadEndTime != that.singleUploadEndTime)
        return false;
    }

    boolean this_present_singleTogetherEndTime = true && this.isSetSingleTogetherEndTime();
    boolean that_present_singleTogetherEndTime = true && that.isSetSingleTogetherEndTime();
    if (this_present_singleTogetherEndTime || that_present_singleTogetherEndTime) {
      if (!(this_present_singleTogetherEndTime && that_present_singleTogetherEndTime))
        return false;
      if (this.singleTogetherEndTime != that.singleTogetherEndTime)
        return false;
    }

    boolean this_present_singleEndTime = true && this.isSetSingleEndTime();
    boolean that_present_singleEndTime = true && that.isSetSingleEndTime();
    if (this_present_singleEndTime || that_present_singleEndTime) {
      if (!(this_present_singleEndTime && that_present_singleEndTime))
        return false;
      if (this.singleEndTime != that.singleEndTime)
        return false;
    }

    boolean this_present_compoundTogetherEndTime = true && this.isSetCompoundTogetherEndTime();
    boolean that_present_compoundTogetherEndTime = true && that.isSetCompoundTogetherEndTime();
    if (this_present_compoundTogetherEndTime || that_present_compoundTogetherEndTime) {
      if (!(this_present_compoundTogetherEndTime && that_present_compoundTogetherEndTime))
        return false;
      if (this.compoundTogetherEndTime != that.compoundTogetherEndTime)
        return false;
    }

    boolean this_present_compoundEndTime = true && this.isSetCompoundEndTime();
    boolean that_present_compoundEndTime = true && that.isSetCompoundEndTime();
    if (this_present_compoundEndTime || that_present_compoundEndTime) {
      if (!(this_present_compoundEndTime && that_present_compoundEndTime))
        return false;
      if (this.compoundEndTime != that.compoundEndTime)
        return false;
    }

    boolean this_present_char1 = true && this.isSetChar1();
    boolean that_present_char1 = true && that.isSetChar1();
    if (this_present_char1 || that_present_char1) {
      if (!(this_present_char1 && that_present_char1))
        return false;
      if (!this.char1.equals(that.char1))
        return false;
    }

    boolean this_present_char2 = true && this.isSetChar2();
    boolean that_present_char2 = true && that.isSetChar2();
    if (this_present_char2 || that_present_char2) {
      if (!(this_present_char2 && that_present_char2))
        return false;
      if (!this.char2.equals(that.char2))
        return false;
    }

    boolean this_present_char3 = true && this.isSetChar3();
    boolean that_present_char3 = true && that.isSetChar3();
    if (this_present_char3 || that_present_char3) {
      if (!(this_present_char3 && that_present_char3))
        return false;
      if (!this.char3.equals(that.char3))
        return false;
    }

    boolean this_present_officialBeginTime = true && this.isSetOfficialBeginTime();
    boolean that_present_officialBeginTime = true && that.isSetOfficialBeginTime();
    if (this_present_officialBeginTime || that_present_officialBeginTime) {
      if (!(this_present_officialBeginTime && that_present_officialBeginTime))
        return false;
      if (this.officialBeginTime != that.officialBeginTime)
        return false;
    }

    boolean this_present_officialEndTime = true && this.isSetOfficialEndTime();
    boolean that_present_officialEndTime = true && that.isSetOfficialEndTime();
    if (this_present_officialEndTime || that_present_officialEndTime) {
      if (!(this_present_officialEndTime && that_present_officialEndTime))
        return false;
      if (this.officialEndTime != that.officialEndTime)
        return false;
    }

    boolean this_present_drawTime = true && this.isSetDrawTime();
    boolean that_present_drawTime = true && that.isSetDrawTime();
    if (this_present_drawTime || that_present_drawTime) {
      if (!(this_present_drawTime && that_present_drawTime))
        return false;
      if (this.drawTime != that.drawTime)
        return false;
    }

    boolean this_present_drawResult = true && this.isSetDrawResult();
    boolean that_present_drawResult = true && that.isSetDrawResult();
    if (this_present_drawResult || that_present_drawResult) {
      if (!(this_present_drawResult && that_present_drawResult))
        return false;
      if (!this.drawResult.equals(that.drawResult))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_extInfo = true && this.isSetExtInfo();
    boolean that_present_extInfo = true && that.isSetExtInfo();
    if (this_present_extInfo || that_present_extInfo) {
      if (!(this_present_extInfo && that_present_extInfo))
        return false;
      if (!this.extInfo.equals(that.extInfo))
        return false;
    }

    boolean this_present_beginTime = true && this.isSetBeginTime();
    boolean that_present_beginTime = true && that.isSetBeginTime();
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_int1 = true && this.isSetInt1();
    boolean that_present_int1 = true && that.isSetInt1();
    if (this_present_int1 || that_present_int1) {
      if (!(this_present_int1 && that_present_int1))
        return false;
      if (this.int1 != that.int1)
        return false;
    }

    boolean this_present_int2 = true && this.isSetInt2();
    boolean that_present_int2 = true && that.isSetInt2();
    if (this_present_int2 || that_present_int2) {
      if (!(this_present_int2 && that_present_int2))
        return false;
      if (this.int2 != that.int2)
        return false;
    }

    boolean this_present_int3 = true && this.isSetInt3();
    boolean that_present_int3 = true && that.isSetInt3();
    if (this_present_int3 || that_present_int3) {
      if (!(this_present_int3 && that_present_int3))
        return false;
      if (this.int3 != that.int3)
        return false;
    }

    boolean this_present_date1 = true && this.isSetDate1();
    boolean that_present_date1 = true && that.isSetDate1();
    if (this_present_date1 || that_present_date1) {
      if (!(this_present_date1 && that_present_date1))
        return false;
      if (this.date1 != that.date1)
        return false;
    }

    boolean this_present_date2 = true && this.isSetDate2();
    boolean that_present_date2 = true && that.isSetDate2();
    if (this_present_date2 || that_present_date2) {
      if (!(this_present_date2 && that_present_date2))
        return false;
      if (this.date2 != that.date2)
        return false;
    }

    boolean this_present_date3 = true && this.isSetDate3();
    boolean that_present_date3 = true && that.isSetDate3();
    if (this_present_date3 || that_present_date3) {
      if (!(this_present_date3 && that_present_date3))
        return false;
      if (this.date3 != that.date3)
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (this.lastUpdateTime != that.lastUpdateTime)
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_issueId = true && this.isSetIssueId();
    boolean that_present_issueId = true && that.isSetIssueId();
    if (this_present_issueId || that_present_issueId) {
      if (!(this_present_issueId && that_present_issueId))
        return false;
      if (this.issueId != that.issueId)
        return false;
    }

    boolean this_present_issueState = true && this.isSetIssueState();
    boolean that_present_issueState = true && that.isSetIssueState();
    if (this_present_issueState || that_present_issueState) {
      if (!(this_present_issueState && that_present_issueState))
        return false;
      if (this.issueState != that.issueState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(IssueDo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintBeginTime()).compareTo(other.isSetPrintBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printBeginTime, other.printBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintEndTime()).compareTo(other.isSetPrintEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printEndTime, other.printEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUploadEndTime()).compareTo(other.isSetSingleUploadEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUploadEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUploadEndTime, other.singleUploadEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleTogetherEndTime()).compareTo(other.isSetSingleTogetherEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleTogetherEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleTogetherEndTime, other.singleTogetherEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleEndTime()).compareTo(other.isSetSingleEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleEndTime, other.singleEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompoundTogetherEndTime()).compareTo(other.isSetCompoundTogetherEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompoundTogetherEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compoundTogetherEndTime, other.compoundTogetherEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompoundEndTime()).compareTo(other.isSetCompoundEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompoundEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compoundEndTime, other.compoundEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChar1()).compareTo(other.isSetChar1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChar1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.char1, other.char1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChar2()).compareTo(other.isSetChar2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChar2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.char2, other.char2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChar3()).compareTo(other.isSetChar3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChar3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.char3, other.char3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialBeginTime()).compareTo(other.isSetOfficialBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialBeginTime, other.officialBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialEndTime()).compareTo(other.isSetOfficialEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialEndTime, other.officialEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawTime()).compareTo(other.isSetDrawTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawTime, other.drawTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawResult()).compareTo(other.isSetDrawResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawResult, other.drawResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtInfo()).compareTo(other.isSetExtInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extInfo, other.extInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt1()).compareTo(other.isSetInt1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int1, other.int1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt2()).compareTo(other.isSetInt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int2, other.int2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt3()).compareTo(other.isSetInt3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int3, other.int3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate1()).compareTo(other.isSetDate1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date1, other.date1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate2()).compareTo(other.isSetDate2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date2, other.date2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate3()).compareTo(other.isSetDate3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date3, other.date3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueId()).compareTo(other.isSetIssueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueId, other.issueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueState()).compareTo(other.isSetIssueState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueState, other.issueState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IssueDo(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetPrintBeginTime()) {
      if (!first) sb.append(", ");
      sb.append("printBeginTime:");
      sb.append(this.printBeginTime);
      first = false;
    }
    if (isSetPrintEndTime()) {
      if (!first) sb.append(", ");
      sb.append("printEndTime:");
      sb.append(this.printEndTime);
      first = false;
    }
    if (isSetSingleUploadEndTime()) {
      if (!first) sb.append(", ");
      sb.append("singleUploadEndTime:");
      sb.append(this.singleUploadEndTime);
      first = false;
    }
    if (isSetSingleTogetherEndTime()) {
      if (!first) sb.append(", ");
      sb.append("singleTogetherEndTime:");
      sb.append(this.singleTogetherEndTime);
      first = false;
    }
    if (isSetSingleEndTime()) {
      if (!first) sb.append(", ");
      sb.append("singleEndTime:");
      sb.append(this.singleEndTime);
      first = false;
    }
    if (isSetCompoundTogetherEndTime()) {
      if (!first) sb.append(", ");
      sb.append("compoundTogetherEndTime:");
      sb.append(this.compoundTogetherEndTime);
      first = false;
    }
    if (isSetCompoundEndTime()) {
      if (!first) sb.append(", ");
      sb.append("compoundEndTime:");
      sb.append(this.compoundEndTime);
      first = false;
    }
    if (isSetChar1()) {
      if (!first) sb.append(", ");
      sb.append("char1:");
      if (this.char1 == null) {
        sb.append("null");
      } else {
        sb.append(this.char1);
      }
      first = false;
    }
    if (isSetChar2()) {
      if (!first) sb.append(", ");
      sb.append("char2:");
      if (this.char2 == null) {
        sb.append("null");
      } else {
        sb.append(this.char2);
      }
      first = false;
    }
    if (isSetChar3()) {
      if (!first) sb.append(", ");
      sb.append("char3:");
      if (this.char3 == null) {
        sb.append("null");
      } else {
        sb.append(this.char3);
      }
      first = false;
    }
    if (isSetOfficialBeginTime()) {
      if (!first) sb.append(", ");
      sb.append("officialBeginTime:");
      sb.append(this.officialBeginTime);
      first = false;
    }
    if (isSetOfficialEndTime()) {
      if (!first) sb.append(", ");
      sb.append("officialEndTime:");
      sb.append(this.officialEndTime);
      first = false;
    }
    if (isSetDrawTime()) {
      if (!first) sb.append(", ");
      sb.append("drawTime:");
      sb.append(this.drawTime);
      first = false;
    }
    if (isSetDrawResult()) {
      if (!first) sb.append(", ");
      sb.append("drawResult:");
      if (this.drawResult == null) {
        sb.append("null");
      } else {
        sb.append(this.drawResult);
      }
      first = false;
    }
    if (isSetLotteryId()) {
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
    }
    if (isSetExtInfo()) {
      if (!first) sb.append(", ");
      sb.append("extInfo:");
      if (this.extInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.extInfo);
      }
      first = false;
    }
    if (isSetBeginTime()) {
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      sb.append(this.beginTime);
      first = false;
    }
    if (isSetInt1()) {
      if (!first) sb.append(", ");
      sb.append("int1:");
      sb.append(this.int1);
      first = false;
    }
    if (isSetInt2()) {
      if (!first) sb.append(", ");
      sb.append("int2:");
      sb.append(this.int2);
      first = false;
    }
    if (isSetInt3()) {
      if (!first) sb.append(", ");
      sb.append("int3:");
      sb.append(this.int3);
      first = false;
    }
    if (isSetDate1()) {
      if (!first) sb.append(", ");
      sb.append("date1:");
      sb.append(this.date1);
      first = false;
    }
    if (isSetDate2()) {
      if (!first) sb.append(", ");
      sb.append("date2:");
      sb.append(this.date2);
      first = false;
    }
    if (isSetDate3()) {
      if (!first) sb.append(", ");
      sb.append("date3:");
      sb.append(this.date3);
      first = false;
    }
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      sb.append(this.lastUpdateTime);
      first = false;
    }
    if (isSetIssueNo()) {
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
    }
    if (isSetIssueId()) {
      if (!first) sb.append(", ");
      sb.append("issueId:");
      sb.append(this.issueId);
      first = false;
    }
    if (isSetIssueState()) {
      if (!first) sb.append(", ");
      sb.append("issueState:");
      sb.append(this.issueState);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IssueDoStandardSchemeFactory implements SchemeFactory {
    public IssueDoStandardScheme getScheme() {
      return new IssueDoStandardScheme();
    }
  }

  private static class IssueDoStandardScheme extends StandardScheme<IssueDo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IssueDo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINT_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.printBeginTime = iprot.readI64();
              struct.setPrintBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINT_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.printEndTime = iprot.readI64();
              struct.setPrintEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SINGLE_UPLOAD_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.singleUploadEndTime = iprot.readI64();
              struct.setSingleUploadEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SINGLE_TOGETHER_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.singleTogetherEndTime = iprot.readI64();
              struct.setSingleTogetherEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SINGLE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.singleEndTime = iprot.readI64();
              struct.setSingleEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPOUND_TOGETHER_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compoundTogetherEndTime = iprot.readI64();
              struct.setCompoundTogetherEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPOUND_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compoundEndTime = iprot.readI64();
              struct.setCompoundEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHAR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.char1 = iprot.readString();
              struct.setChar1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHAR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.char2 = iprot.readString();
              struct.setChar2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHAR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.char3 = iprot.readString();
              struct.setChar3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OFFICIAL_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.officialBeginTime = iprot.readI64();
              struct.setOfficialBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OFFICIAL_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.officialEndTime = iprot.readI64();
              struct.setOfficialEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DRAW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.drawTime = iprot.readI64();
              struct.setDrawTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DRAW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawResult = iprot.readString();
              struct.setDrawResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EXT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extInfo = iprot.readString();
              struct.setExtInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INT1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int1 = iprot.readI64();
              struct.setInt1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // INT2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int2 = iprot.readI64();
              struct.setInt2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INT3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int3 = iprot.readI64();
              struct.setInt3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DATE1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date1 = iprot.readI64();
              struct.setDate1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DATE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date2 = iprot.readI64();
              struct.setDate2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DATE3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date3 = iprot.readI64();
              struct.setDate3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdateTime = iprot.readI64();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ISSUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.issueId = iprot.readI64();
              struct.setIssueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ISSUE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.issueState = iprot.readI32();
              struct.setIssueStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IssueDo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.isSetPrintBeginTime()) {
        oprot.writeFieldBegin(PRINT_BEGIN_TIME_FIELD_DESC);
        oprot.writeI64(struct.printBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrintEndTime()) {
        oprot.writeFieldBegin(PRINT_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.printEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSingleUploadEndTime()) {
        oprot.writeFieldBegin(SINGLE_UPLOAD_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.singleUploadEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSingleTogetherEndTime()) {
        oprot.writeFieldBegin(SINGLE_TOGETHER_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.singleTogetherEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSingleEndTime()) {
        oprot.writeFieldBegin(SINGLE_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.singleEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompoundTogetherEndTime()) {
        oprot.writeFieldBegin(COMPOUND_TOGETHER_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.compoundTogetherEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompoundEndTime()) {
        oprot.writeFieldBegin(COMPOUND_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.compoundEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.char1 != null) {
        if (struct.isSetChar1()) {
          oprot.writeFieldBegin(CHAR1_FIELD_DESC);
          oprot.writeString(struct.char1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.char2 != null) {
        if (struct.isSetChar2()) {
          oprot.writeFieldBegin(CHAR2_FIELD_DESC);
          oprot.writeString(struct.char2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.char3 != null) {
        if (struct.isSetChar3()) {
          oprot.writeFieldBegin(CHAR3_FIELD_DESC);
          oprot.writeString(struct.char3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOfficialBeginTime()) {
        oprot.writeFieldBegin(OFFICIAL_BEGIN_TIME_FIELD_DESC);
        oprot.writeI64(struct.officialBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOfficialEndTime()) {
        oprot.writeFieldBegin(OFFICIAL_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.officialEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDrawTime()) {
        oprot.writeFieldBegin(DRAW_TIME_FIELD_DESC);
        oprot.writeI64(struct.drawTime);
        oprot.writeFieldEnd();
      }
      if (struct.drawResult != null) {
        if (struct.isSetDrawResult()) {
          oprot.writeFieldBegin(DRAW_RESULT_FIELD_DESC);
          oprot.writeString(struct.drawResult);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lotteryId != null) {
        if (struct.isSetLotteryId()) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extInfo != null) {
        if (struct.isSetExtInfo()) {
          oprot.writeFieldBegin(EXT_INFO_FIELD_DESC);
          oprot.writeString(struct.extInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBeginTime()) {
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeI64(struct.beginTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt1()) {
        oprot.writeFieldBegin(INT1_FIELD_DESC);
        oprot.writeI64(struct.int1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt2()) {
        oprot.writeFieldBegin(INT2_FIELD_DESC);
        oprot.writeI64(struct.int2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt3()) {
        oprot.writeFieldBegin(INT3_FIELD_DESC);
        oprot.writeI64(struct.int3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate1()) {
        oprot.writeFieldBegin(DATE1_FIELD_DESC);
        oprot.writeI64(struct.date1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate2()) {
        oprot.writeFieldBegin(DATE2_FIELD_DESC);
        oprot.writeI64(struct.date2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate3()) {
        oprot.writeFieldBegin(DATE3_FIELD_DESC);
        oprot.writeI64(struct.date3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        if (struct.isSetIssueNo()) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIssueId()) {
        oprot.writeFieldBegin(ISSUE_ID_FIELD_DESC);
        oprot.writeI64(struct.issueId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIssueState()) {
        oprot.writeFieldBegin(ISSUE_STATE_FIELD_DESC);
        oprot.writeI32(struct.issueState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IssueDoTupleSchemeFactory implements SchemeFactory {
    public IssueDoTupleScheme getScheme() {
      return new IssueDoTupleScheme();
    }
  }

  private static class IssueDoTupleScheme extends TupleScheme<IssueDo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IssueDo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetPrintBeginTime()) {
        optionals.set(1);
      }
      if (struct.isSetPrintEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetSingleUploadEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetSingleTogetherEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetSingleEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetCompoundTogetherEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetCompoundEndTime()) {
        optionals.set(7);
      }
      if (struct.isSetChar1()) {
        optionals.set(8);
      }
      if (struct.isSetChar2()) {
        optionals.set(9);
      }
      if (struct.isSetChar3()) {
        optionals.set(10);
      }
      if (struct.isSetOfficialBeginTime()) {
        optionals.set(11);
      }
      if (struct.isSetOfficialEndTime()) {
        optionals.set(12);
      }
      if (struct.isSetDrawTime()) {
        optionals.set(13);
      }
      if (struct.isSetDrawResult()) {
        optionals.set(14);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(15);
      }
      if (struct.isSetExtInfo()) {
        optionals.set(16);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(17);
      }
      if (struct.isSetInt1()) {
        optionals.set(18);
      }
      if (struct.isSetInt2()) {
        optionals.set(19);
      }
      if (struct.isSetInt3()) {
        optionals.set(20);
      }
      if (struct.isSetDate1()) {
        optionals.set(21);
      }
      if (struct.isSetDate2()) {
        optionals.set(22);
      }
      if (struct.isSetDate3()) {
        optionals.set(23);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(24);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(25);
      }
      if (struct.isSetIssueId()) {
        optionals.set(26);
      }
      if (struct.isSetIssueState()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetPrintBeginTime()) {
        oprot.writeI64(struct.printBeginTime);
      }
      if (struct.isSetPrintEndTime()) {
        oprot.writeI64(struct.printEndTime);
      }
      if (struct.isSetSingleUploadEndTime()) {
        oprot.writeI64(struct.singleUploadEndTime);
      }
      if (struct.isSetSingleTogetherEndTime()) {
        oprot.writeI64(struct.singleTogetherEndTime);
      }
      if (struct.isSetSingleEndTime()) {
        oprot.writeI64(struct.singleEndTime);
      }
      if (struct.isSetCompoundTogetherEndTime()) {
        oprot.writeI64(struct.compoundTogetherEndTime);
      }
      if (struct.isSetCompoundEndTime()) {
        oprot.writeI64(struct.compoundEndTime);
      }
      if (struct.isSetChar1()) {
        oprot.writeString(struct.char1);
      }
      if (struct.isSetChar2()) {
        oprot.writeString(struct.char2);
      }
      if (struct.isSetChar3()) {
        oprot.writeString(struct.char3);
      }
      if (struct.isSetOfficialBeginTime()) {
        oprot.writeI64(struct.officialBeginTime);
      }
      if (struct.isSetOfficialEndTime()) {
        oprot.writeI64(struct.officialEndTime);
      }
      if (struct.isSetDrawTime()) {
        oprot.writeI64(struct.drawTime);
      }
      if (struct.isSetDrawResult()) {
        oprot.writeString(struct.drawResult);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetExtInfo()) {
        oprot.writeString(struct.extInfo);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetInt1()) {
        oprot.writeI64(struct.int1);
      }
      if (struct.isSetInt2()) {
        oprot.writeI64(struct.int2);
      }
      if (struct.isSetInt3()) {
        oprot.writeI64(struct.int3);
      }
      if (struct.isSetDate1()) {
        oprot.writeI64(struct.date1);
      }
      if (struct.isSetDate2()) {
        oprot.writeI64(struct.date2);
      }
      if (struct.isSetDate3()) {
        oprot.writeI64(struct.date3);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeI64(struct.lastUpdateTime);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetIssueId()) {
        oprot.writeI64(struct.issueId);
      }
      if (struct.isSetIssueState()) {
        oprot.writeI32(struct.issueState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IssueDo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.printBeginTime = iprot.readI64();
        struct.setPrintBeginTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.printEndTime = iprot.readI64();
        struct.setPrintEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.singleUploadEndTime = iprot.readI64();
        struct.setSingleUploadEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.singleTogetherEndTime = iprot.readI64();
        struct.setSingleTogetherEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.singleEndTime = iprot.readI64();
        struct.setSingleEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.compoundTogetherEndTime = iprot.readI64();
        struct.setCompoundTogetherEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.compoundEndTime = iprot.readI64();
        struct.setCompoundEndTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.char1 = iprot.readString();
        struct.setChar1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.char2 = iprot.readString();
        struct.setChar2IsSet(true);
      }
      if (incoming.get(10)) {
        struct.char3 = iprot.readString();
        struct.setChar3IsSet(true);
      }
      if (incoming.get(11)) {
        struct.officialBeginTime = iprot.readI64();
        struct.setOfficialBeginTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.officialEndTime = iprot.readI64();
        struct.setOfficialEndTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.drawTime = iprot.readI64();
        struct.setDrawTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.drawResult = iprot.readString();
        struct.setDrawResultIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.extInfo = iprot.readString();
        struct.setExtInfoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.int1 = iprot.readI64();
        struct.setInt1IsSet(true);
      }
      if (incoming.get(19)) {
        struct.int2 = iprot.readI64();
        struct.setInt2IsSet(true);
      }
      if (incoming.get(20)) {
        struct.int3 = iprot.readI64();
        struct.setInt3IsSet(true);
      }
      if (incoming.get(21)) {
        struct.date1 = iprot.readI64();
        struct.setDate1IsSet(true);
      }
      if (incoming.get(22)) {
        struct.date2 = iprot.readI64();
        struct.setDate2IsSet(true);
      }
      if (incoming.get(23)) {
        struct.date3 = iprot.readI64();
        struct.setDate3IsSet(true);
      }
      if (incoming.get(24)) {
        struct.lastUpdateTime = iprot.readI64();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.issueId = iprot.readI64();
        struct.setIssueIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.issueState = iprot.readI32();
        struct.setIssueStateIsSet(true);
      }
    }
  }

}

