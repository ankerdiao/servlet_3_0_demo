/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.servlet.demo.netty.sample.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-19")
public class IdGenBatchResp implements org.apache.thrift.TBase<IdGenBatchResp, IdGenBatchResp._Fields>, java.io.Serializable, Cloneable, Comparable<IdGenBatchResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdGenBatchResp");

  private static final org.apache.thrift.protocol.TField GEN_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("genIdList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OUT_RESERVED_FIELD_DESC = new org.apache.thrift.protocol.TField("outReserved", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IdGenBatchRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IdGenBatchRespTupleSchemeFactory());
  }

  public List<Long> genIdList; // required
  public long errCode; // required
  public String errMsg; // optional
  public String outReserved; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GEN_ID_LIST((short)1, "genIdList"),
    ERR_CODE((short)2, "errCode"),
    ERR_MSG((short)3, "errMsg"),
    OUT_RESERVED((short)4, "outReserved");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GEN_ID_LIST
          return GEN_ID_LIST;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERR_MSG
          return ERR_MSG;
        case 4: // OUT_RESERVED
          return OUT_RESERVED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERR_MSG,_Fields.OUT_RESERVED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GEN_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("genIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_RESERVED, new org.apache.thrift.meta_data.FieldMetaData("outReserved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdGenBatchResp.class, metaDataMap);
  }

  public IdGenBatchResp() {
  }

  public IdGenBatchResp(
    List<Long> genIdList,
    long errCode)
  {
    this();
    this.genIdList = genIdList;
    this.errCode = errCode;
    setErrCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IdGenBatchResp(IdGenBatchResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGenIdList()) {
      List<Long> __this__genIdList = new ArrayList<Long>(other.genIdList);
      this.genIdList = __this__genIdList;
    }
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetOutReserved()) {
      this.outReserved = other.outReserved;
    }
  }

  public IdGenBatchResp deepCopy() {
    return new IdGenBatchResp(this);
  }

  @Override
  public void clear() {
    this.genIdList = null;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
    this.outReserved = null;
  }

  public int getGenIdListSize() {
    return (this.genIdList == null) ? 0 : this.genIdList.size();
  }

  public java.util.Iterator<Long> getGenIdListIterator() {
    return (this.genIdList == null) ? null : this.genIdList.iterator();
  }

  public void addToGenIdList(long elem) {
    if (this.genIdList == null) {
      this.genIdList = new ArrayList<Long>();
    }
    this.genIdList.add(elem);
  }

  public List<Long> getGenIdList() {
    return this.genIdList;
  }

  public IdGenBatchResp setGenIdList(List<Long> genIdList) {
    this.genIdList = genIdList;
    return this;
  }

  public void unsetGenIdList() {
    this.genIdList = null;
  }

  /** Returns true if field genIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetGenIdList() {
    return this.genIdList != null;
  }

  public void setGenIdListIsSet(boolean value) {
    if (!value) {
      this.genIdList = null;
    }
  }

  public long getErrCode() {
    return this.errCode;
  }

  public IdGenBatchResp setErrCode(long errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public IdGenBatchResp setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public String getOutReserved() {
    return this.outReserved;
  }

  public IdGenBatchResp setOutReserved(String outReserved) {
    this.outReserved = outReserved;
    return this;
  }

  public void unsetOutReserved() {
    this.outReserved = null;
  }

  /** Returns true if field outReserved is set (has been assigned a value) and false otherwise */
  public boolean isSetOutReserved() {
    return this.outReserved != null;
  }

  public void setOutReservedIsSet(boolean value) {
    if (!value) {
      this.outReserved = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GEN_ID_LIST:
      if (value == null) {
        unsetGenIdList();
      } else {
        setGenIdList((List<Long>)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Long)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case OUT_RESERVED:
      if (value == null) {
        unsetOutReserved();
      } else {
        setOutReserved((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GEN_ID_LIST:
      return getGenIdList();

    case ERR_CODE:
      return Long.valueOf(getErrCode());

    case ERR_MSG:
      return getErrMsg();

    case OUT_RESERVED:
      return getOutReserved();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GEN_ID_LIST:
      return isSetGenIdList();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    case OUT_RESERVED:
      return isSetOutReserved();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IdGenBatchResp)
      return this.equals((IdGenBatchResp)that);
    return false;
  }

  public boolean equals(IdGenBatchResp that) {
    if (that == null)
      return false;

    boolean this_present_genIdList = true && this.isSetGenIdList();
    boolean that_present_genIdList = true && that.isSetGenIdList();
    if (this_present_genIdList || that_present_genIdList) {
      if (!(this_present_genIdList && that_present_genIdList))
        return false;
      if (!this.genIdList.equals(that.genIdList))
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_outReserved = true && this.isSetOutReserved();
    boolean that_present_outReserved = true && that.isSetOutReserved();
    if (this_present_outReserved || that_present_outReserved) {
      if (!(this_present_outReserved && that_present_outReserved))
        return false;
      if (!this.outReserved.equals(that.outReserved))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_genIdList = true && (isSetGenIdList());
    list.add(present_genIdList);
    if (present_genIdList)
      list.add(genIdList);

    boolean present_errCode = true;
    list.add(present_errCode);
    if (present_errCode)
      list.add(errCode);

    boolean present_errMsg = true && (isSetErrMsg());
    list.add(present_errMsg);
    if (present_errMsg)
      list.add(errMsg);

    boolean present_outReserved = true && (isSetOutReserved());
    list.add(present_outReserved);
    if (present_outReserved)
      list.add(outReserved);

    return list.hashCode();
  }

  @Override
  public int compareTo(IdGenBatchResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGenIdList()).compareTo(other.isSetGenIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genIdList, other.genIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutReserved()).compareTo(other.isSetOutReserved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutReserved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outReserved, other.outReserved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IdGenBatchResp(");
    boolean first = true;

    sb.append("genIdList:");
    if (this.genIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.genIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (isSetErrMsg()) {
      if (!first) sb.append(", ");
      sb.append("errMsg:");
      if (this.errMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.errMsg);
      }
      first = false;
    }
    if (isSetOutReserved()) {
      if (!first) sb.append(", ");
      sb.append("outReserved:");
      if (this.outReserved == null) {
        sb.append("null");
      } else {
        sb.append(this.outReserved);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IdGenBatchRespStandardSchemeFactory implements SchemeFactory {
    public IdGenBatchRespStandardScheme getScheme() {
      return new IdGenBatchRespStandardScheme();
    }
  }

  private static class IdGenBatchRespStandardScheme extends StandardScheme<IdGenBatchResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IdGenBatchResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GEN_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.genIdList = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.genIdList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGenIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errCode = iprot.readI64();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUT_RESERVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outReserved = iprot.readString();
              struct.setOutReservedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IdGenBatchResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.genIdList != null) {
        oprot.writeFieldBegin(GEN_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.genIdList.size()));
          for (long _iter3 : struct.genIdList)
          {
            oprot.writeI64(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI64(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        if (struct.isSetErrMsg()) {
          oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
          oprot.writeString(struct.errMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.outReserved != null) {
        if (struct.isSetOutReserved()) {
          oprot.writeFieldBegin(OUT_RESERVED_FIELD_DESC);
          oprot.writeString(struct.outReserved);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IdGenBatchRespTupleSchemeFactory implements SchemeFactory {
    public IdGenBatchRespTupleScheme getScheme() {
      return new IdGenBatchRespTupleScheme();
    }
  }

  private static class IdGenBatchRespTupleScheme extends TupleScheme<IdGenBatchResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IdGenBatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGenIdList()) {
        optionals.set(0);
      }
      if (struct.isSetErrCode()) {
        optionals.set(1);
      }
      if (struct.isSetErrMsg()) {
        optionals.set(2);
      }
      if (struct.isSetOutReserved()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGenIdList()) {
        {
          oprot.writeI32(struct.genIdList.size());
          for (long _iter4 : struct.genIdList)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetErrCode()) {
        oprot.writeI64(struct.errCode);
      }
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetOutReserved()) {
        oprot.writeString(struct.outReserved);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IdGenBatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.genIdList = new ArrayList<Long>(_list5.size);
          long _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI64();
            struct.genIdList.add(_elem6);
          }
        }
        struct.setGenIdListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errCode = iprot.readI64();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.outReserved = iprot.readString();
        struct.setOutReservedIsSet(true);
      }
    }
  }

}

