/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.servlet.demo.netty.sample.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-19")
public class IdGenReq implements org.apache.thrift.TBase<IdGenReq, IdGenReq._Fields>, java.io.Serializable, Cloneable, Comparable<IdGenReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdGenReq");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("scene", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IN_RESERVED_FIELD_DESC = new org.apache.thrift.protocol.TField("inReserved", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IdGenReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IdGenReqTupleSchemeFactory());
  }

  public String tableName; // required
  public String source; // required
  public int scene; // required
  public String inReserved; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    SOURCE((short)2, "source"),
    SCENE((short)3, "scene"),
    IN_RESERVED((short)4, "inReserved");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // SOURCE
          return SOURCE;
        case 3: // SCENE
          return SCENE;
        case 4: // IN_RESERVED
          return IN_RESERVED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCENE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IN_RESERVED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCENE, new org.apache.thrift.meta_data.FieldMetaData("scene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_RESERVED, new org.apache.thrift.meta_data.FieldMetaData("inReserved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdGenReq.class, metaDataMap);
  }

  public IdGenReq() {
  }

  public IdGenReq(
    String tableName,
    String source,
    int scene)
  {
    this();
    this.tableName = tableName;
    this.source = source;
    this.scene = scene;
    setSceneIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IdGenReq(IdGenReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.scene = other.scene;
    if (other.isSetInReserved()) {
      this.inReserved = other.inReserved;
    }
  }

  public IdGenReq deepCopy() {
    return new IdGenReq(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.source = null;
    setSceneIsSet(false);
    this.scene = 0;
    this.inReserved = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public IdGenReq setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public IdGenReq setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public int getScene() {
    return this.scene;
  }

  public IdGenReq setScene(int scene) {
    this.scene = scene;
    setSceneIsSet(true);
    return this;
  }

  public void unsetScene() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENE_ISSET_ID);
  }

  /** Returns true if field scene is set (has been assigned a value) and false otherwise */
  public boolean isSetScene() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENE_ISSET_ID);
  }

  public void setSceneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENE_ISSET_ID, value);
  }

  public String getInReserved() {
    return this.inReserved;
  }

  public IdGenReq setInReserved(String inReserved) {
    this.inReserved = inReserved;
    return this;
  }

  public void unsetInReserved() {
    this.inReserved = null;
  }

  /** Returns true if field inReserved is set (has been assigned a value) and false otherwise */
  public boolean isSetInReserved() {
    return this.inReserved != null;
  }

  public void setInReservedIsSet(boolean value) {
    if (!value) {
      this.inReserved = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case SCENE:
      if (value == null) {
        unsetScene();
      } else {
        setScene((Integer)value);
      }
      break;

    case IN_RESERVED:
      if (value == null) {
        unsetInReserved();
      } else {
        setInReserved((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case SOURCE:
      return getSource();

    case SCENE:
      return Integer.valueOf(getScene());

    case IN_RESERVED:
      return getInReserved();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case SOURCE:
      return isSetSource();
    case SCENE:
      return isSetScene();
    case IN_RESERVED:
      return isSetInReserved();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IdGenReq)
      return this.equals((IdGenReq)that);
    return false;
  }

  public boolean equals(IdGenReq that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_scene = true;
    boolean that_present_scene = true;
    if (this_present_scene || that_present_scene) {
      if (!(this_present_scene && that_present_scene))
        return false;
      if (this.scene != that.scene)
        return false;
    }

    boolean this_present_inReserved = true && this.isSetInReserved();
    boolean that_present_inReserved = true && that.isSetInReserved();
    if (this_present_inReserved || that_present_inReserved) {
      if (!(this_present_inReserved && that_present_inReserved))
        return false;
      if (!this.inReserved.equals(that.inReserved))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_scene = true;
    list.add(present_scene);
    if (present_scene)
      list.add(scene);

    boolean present_inReserved = true && (isSetInReserved());
    list.add(present_inReserved);
    if (present_inReserved)
      list.add(inReserved);

    return list.hashCode();
  }

  @Override
  public int compareTo(IdGenReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScene()).compareTo(other.isSetScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scene, other.scene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReserved()).compareTo(other.isSetInReserved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReserved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReserved, other.inReserved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IdGenReq(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scene:");
    sb.append(this.scene);
    first = false;
    if (isSetInReserved()) {
      if (!first) sb.append(", ");
      sb.append("inReserved:");
      if (this.inReserved == null) {
        sb.append("null");
      } else {
        sb.append(this.inReserved);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IdGenReqStandardSchemeFactory implements SchemeFactory {
    public IdGenReqStandardScheme getScheme() {
      return new IdGenReqStandardScheme();
    }
  }

  private static class IdGenReqStandardScheme extends StandardScheme<IdGenReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IdGenReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scene = iprot.readI32();
              struct.setSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IN_RESERVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inReserved = iprot.readString();
              struct.setInReservedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IdGenReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCENE_FIELD_DESC);
      oprot.writeI32(struct.scene);
      oprot.writeFieldEnd();
      if (struct.inReserved != null) {
        if (struct.isSetInReserved()) {
          oprot.writeFieldBegin(IN_RESERVED_FIELD_DESC);
          oprot.writeString(struct.inReserved);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IdGenReqTupleSchemeFactory implements SchemeFactory {
    public IdGenReqTupleScheme getScheme() {
      return new IdGenReqTupleScheme();
    }
  }

  private static class IdGenReqTupleScheme extends TupleScheme<IdGenReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IdGenReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetSource()) {
        optionals.set(1);
      }
      if (struct.isSetScene()) {
        optionals.set(2);
      }
      if (struct.isSetInReserved()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetScene()) {
        oprot.writeI32(struct.scene);
      }
      if (struct.isSetInReserved()) {
        oprot.writeString(struct.inReserved);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IdGenReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.scene = iprot.readI32();
        struct.setSceneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inReserved = iprot.readString();
        struct.setInReservedIsSet(true);
      }
    }
  }

}

